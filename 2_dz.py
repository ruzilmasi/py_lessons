# 1. Выяснить тип результата выражений:
# 15 * 3
# 15 / 3
# 15 // 2
# 15 ** 2

print(type(15 * 3))
print(type(15 / 3))
print(type(15 // 2))
print(type(15 ** 2))

# 2. Дан список:
# ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками
# (добавить кавычку до и кавычку после элемента списка, являющегося числом) и дополнить нулём
# до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"',
# '+05', '"', 'градусов']
#
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
#
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка? Как модифицировать это
# условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его реализации
# позже. Главное: дополнить числа до двух разрядов нулём!

some_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

new_list = []

for el in some_list:
    if el.isdigit():
        new_list.append('"')
        new_list.append(f'{int(el):02}')
        new_list.append('"')
    elif el.startswith('+'):
        new_list.append('"')
        new_list.append(f'+{int(el):02}')
        new_list.append('"')
    elif el.startswith('-'):
        new_list.append('"')
        new_list.append(f'-{int(el):02}')
        new_list.append('"')
    else:
        new_list.append(el)

print(new_list)
print(' '.join(new_list))

result = []
for i in range(len(new_list)):
    if new_list[i].isdigit():
        result.append(f'{new_list[i-1]}{new_list[i]}{new_list[i+1]}')
    elif new_list[i] == '"':
        continue
    elif new_list[i].startswith('+'):
        result.append(f'{new_list[i-1]}{new_list[i]}{new_list[i+1]}')
    elif new_list[i].startswith('-'):
        result.append(f'{new_list[i-1]}{new_list[i]}{new_list[i+1]}')
    else:
        result.append(new_list[i])

print(' '.join(result))


# 3. * (вместо задачи 2) Решить задачу 2 не создавая новый список (как говорят, in place).
# Эта задача намного серьёзнее, чем может сначала показаться.

lst = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

for i in range(len(lst)):
    if lst[i].isdigit() or (lst[i][0] in ('+', '-') and lst[i][1:].isdigit()):
        lst[i] = lst[i].zfill(2)
        lst[i] = '"' + lst[i] + '"'

result = ' '.join(lst)
print(result)


# 4. Дан список, содержащий искажённые данные с должностями и именами сотрудников:
# ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй',
# 'директор аэлита']
#
# Известно, что имя сотрудника всегда в конце строки. Сформировать и вывести на экран фразы вида:
# 'Привет, Игорь!' Подумать, как получить имена сотрудников из элементов списка, как привести их
# к корректному виду. Можно ли при этом не создавать новый список?

info_list = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй',
             'директор аэлита']

for el in info_list:
    print(f'Привет, {el.split()[-1].capitalize()}')

# 5. Создать список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
#
# Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
# Вывести цены, отсортированные по возрастанию, новый список не создавать
# (доказать, что объект списка после сортировки остался тот же).
# Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию,
# написав минимум кода?

price_list = [57.8, 46.51, 97, 123.23, 76, 87.8, 65.66, 54, 157, 184.44, 13.98, 74, 12323.43]
print(id(price_list))

result = []

for num in price_list:
    price = str(num).split('.')
    r = price[0]
    k = 0
    if len(price) == 1:
        price.append(f'{k}')
    else:
        k = price[1]
    result.append(f'{r} руб {int(k):02d} коп')
print(', '.join(result))

price_list.sort()
print(id(price_list))

print('-----------------------')
new_price_list = sorted(price_list, reverse=True)
print(new_price_list)

print(new_price_list[4::-1])
